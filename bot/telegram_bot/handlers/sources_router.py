from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, or_f, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram import F, types, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, CallbackQuery

from kbds import reply
from logs.loging import log_admin_bot
from data.telegram_channel_db import telegram_db
from data.sites_db import site_db
from data.channels_db import return_channels
from handlers.filters import ChatTypeFilter, IsAdmin 

import itertools

admin_source_manage_router = Router()
admin_source_manage_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

tg_db = telegram_db("info")
s_db = site_db("info")
change_image = ""
page  = 0
step = 15

async def return_menu():
    telegram_channel = await tg_db.get_telegramm_channels() 
    global step
    global page
    menu = [[
            InlineKeyboardButton(text="<" if page > 0 else "", callback_data="In_First_button"),
            InlineKeyboardButton(text="üîÑ", callback_data="Reload"),
            InlineKeyboardButton(text=">" if page + step < len(telegram_channel) else "", callback_data="In_Second_button") 
        ]]
    return InlineKeyboardMarkup(inline_keyboard=menu)

@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
async def source(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ", reply_markup=reply.sites_or_channels_markup)

@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "–∫–∞–Ω–∞–ª—ã")
async def source(message: types.Message):
    telegram_channel = await tg_db.get_telegramm_channels() 
    telegram_channel = dict(itertools.islice(telegram_channel.items(), page, page + step))
    if telegram_channel is not None or len(telegram_channel) != 0:
        channels_to_str = "".join ([f"- id:{id_channel}  @{telegram_channel[id_channel][0].split("/")[-1]}\n" for id_channel in telegram_channel])
        await message.answer(f"{channels_to_str}", reply_markup=await return_menu())
    await message.answer("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –º–µ–Ω—é –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—Ö–æ–¥–∏—Ç: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.", reply_markup=reply.manage_sources_markup)

@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "—Å–∞–π—Ç—ã")
async def source(message: types.Message):
    sites = await s_db.get_sites()
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∞–π—Ç—ã\n"
    for site in sites:
        text += f"- {sites[site][0]}\n"
    await message.answer(text, disable_web_page_preview=True)
    await message.answer("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –º–µ–Ω—é –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—Ö–æ–¥–∏—Ç: —É–¥–∞–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.", reply_markup=reply.manage_sites_markup, disable_web_page_preview=True)

class AddSite(StatesGroup):
    id = State()
    texts = {
        'AddChannel:id': '–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
    }

class DeleteSites(StatesGroup):
    id = State()
    texts = {
        'DeleteChannel:id': '–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
    }


@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def add_channel1(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ url —Å–∞–π—Ç–∞", reply_markup= ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text ="/–æ—Ç–º–µ–Ω–∞"),] ],resize_keyboard=True))
    await state.set_state(AddSite.id)
    
@admin_source_manage_router.message(StateFilter(AddSite.id), F.text != "/–æ—Ç–º–µ–Ω–∞")
async def source(message: types.Message, state: FSMContext):
    await s_db.create_new_sites(message.text.replace(' ', ''))
    await state.clear()
    await message.answer("–£—Å–ø–µ—à–Ω–æ", reply_markup=reply.manage_sites_markup)
    
@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "—É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def delete_channel1(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ url –∫–∞–Ω–∞–ª–∞", reply_markup= ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text ="/–æ—Ç–º–µ–Ω–∞"),] ],resize_keyboard=True))
    await state.set_state(DeleteSites.id)

@admin_source_manage_router.message(StateFilter(DeleteSites.id), F.text != "/–æ—Ç–º–µ–Ω–∞")
async def source(message: types.Message, state: FSMContext):
    await s_db.delete_sites(message.text.replace(' ', ''))
    await state.clear()
    await message.answer("–£—Å–ø–µ—à–Ω–æ", reply_markup=reply.manage_sites_markup)

@admin_source_manage_router.callback_query(F.data == "In_Second_button")
async def query_right_page(callback_query: CallbackQuery):
    global step
    global page
    page += step
    telegram_channel = await tg_db.get_telegramm_channels()
    telegram_channel = dict(itertools.islice(telegram_channel.items(), page, page + step))
    channels_to_str = "".join ([f"- id:{id_channel}  @{telegram_channel[id_channel][0].split("/")[-1]}\n" for id_channel in telegram_channel])

    await callback_query.message.edit_text(f"{channels_to_str}", reply_markup=await return_menu())


@admin_source_manage_router.callback_query(F.data == "In_First_button")
async def query_left_page(callback_query: CallbackQuery):
    global page
    global step
    page -= step
    telegram_channel = await tg_db.get_telegramm_channels()
    telegram_channel = dict(itertools.islice(telegram_channel.items(), page, page + step))
    channels_to_str = "".join ([f"- id:{id_channel}  @{telegram_channel[id_channel][0].split("/")[-1]}\n" for id_channel in telegram_channel])

    await callback_query.message.edit_text(f"{channels_to_str}", reply_markup=await return_menu())

@admin_source_manage_router.callback_query(F.data == "Reload")
async def query_reload_page(callback_query: CallbackQuery):
    global page
    global step
    telegram_channel = await tg_db.get_telegramm_channels()
    telegram_channel = dict(itertools.islice(telegram_channel.items(), page, page + step))
    channels_to_str = "".join ([f"- id:{id_channel}  @{telegram_channel[id_channel][0].split("/")[-1]}\n" for id_channel in telegram_channel])
    if callback_query.message.text != channels_to_str[:-1]:
        await callback_query.message.edit_text(f"{channels_to_str}", reply_markup=await return_menu())
    else:
        await callback_query.answer("–Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ –Ω–µ—Ç")


class AddSource(StatesGroup):
    id_field = State()
    url_field = State()

    texts = {
        'AddSource:id_field': '–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
        'AddSource:url_field': '–í–≤–µ–¥–∏—Ç–µ url –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ'
    }


@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def add_source(message: types.Message, state: FSMContext):
    log_admin_bot().send_debug(f"Received '–¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' command from user: {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–º–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddSource.id_field)

@admin_source_manage_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_source_manage_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=reply.telegram_menu_markup)

@admin_source_manage_router.message(AddSource.id_field, F.text)
async def add_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if len(message.text) != 10:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –¥–ª–∏–Ω–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channel_by_id(int(message.text)) is not None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(id_field=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ url –∫–∞–Ω–∞–ª–∞", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddSource.url_field)

@admin_source_manage_router.message(AddSource.id_field)
async def add_id2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

@admin_source_manage_router.message(AddSource.url_field, F.text)
async def add_url(message: types.Message, state: FSMContext):
    tg_db = telegram_db("info")
    if not ("https://t.me/" in message.text):
        await message.answer("–ü–æ–ª–µ url –¥–æ–ª–∂–Ω–æ —Å–æ–æ–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ—Ç —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É https://t.me/<–Ω–∞–∑–≤–∞–Ω–∏–µ> \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channels_by_url(message.text.replace(" ","")) is not None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(url_field=message.text)
    await message.answer("–ö–∞–Ω–∞–ª –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞—Ä—Å–∏–Ω–≥", reply_markup=reply.manage_sources_markup)
    data = await state.get_data()

    await tg_db.add_telegram_channel(data['url_field'], int(data['id_field']))

    await state.clear()

@admin_source_manage_router.message(AddSource.url_field)
async def add_url2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

class ReductSource(StatesGroup):
    id_field_change = State()
    where_field_change = State()
    id_field = State()
    url_field = State()

    texts = {
        'ReductSource:id_field_change': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –∑–∞–º–µ–Ω—ã –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
        'ReductSource:why_field_change': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –∑–∞–º–µ–Ω—ã –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
        'ReductSource:id_field': '–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
        'ReductSource:url_field': '–í–≤–µ–¥–∏—Ç–µ url –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ',
    }

@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def reduct_source(message: types.Message, state: FSMContext):
    log_admin_bot().send_debug(f"Received '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞' command from user: {message.from_user.id}")
    telegram_channel = await tg_db.get_telegramm_channels()
    if telegram_channel is None or len(telegram_channel) == 0:
        await message.answer("–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await state.clear()
        return
    channels_to_str = "".join ([f"- id:{id_channel}  @{telegram_channel[id_channel][0].split("/")[-1]}\n" for id_channel in telegram_channel])
    text = "–ö–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n" + channels_to_str
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ReductSource.id_field_change)


@admin_source_manage_router.message(ReductSource.id_field_change, F.text)
async def find_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if len(message.text) != 10:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –¥–ª–∏–Ω–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channel_by_id(int(message.text)) is None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(id_field_change=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ –ø–æ–ª–µ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å 1:id 2:url")
    await state.set_state(ReductSource.where_field_change)

@admin_source_manage_router.message(ReductSource.id_field_change)
async def find_id2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

@admin_source_manage_router.message(ReductSource.where_field_change, F.text)
async def which_field_change(message: types.Message, state: FSMContext):
    if not message.text.isdigit:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    elif int(message.text) == 1:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ id:")
        await state.set_state(ReductSource.id_field)
        await state.update_data(where_field_change=message.text)
    elif int(message.text) == 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ url:")
        await state.set_state(ReductSource.url_field)
        await state.update_data(where_field_change=message.text)
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

@admin_source_manage_router.message(ReductSource.id_field_change)
async def which_field_change2(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")

@admin_source_manage_router.message(ReductSource.id_field, F.text)
async def reduct_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if len(message.text.replace(" ","")) != 10:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –¥–ª–∏–Ω–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channel_by_id(int(message.text)) is not None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(id_field=message.text)
    data = await state.get_data()
    await tg_db.update_id_telegram_channel(int(data.get("id_field_change")), int(data.get("id_field")))
    await state.clear()
    await message.answer("–ö–∞–Ω–∞–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", reply_markup=reply.manage_sources_markup)

@admin_source_manage_router.message(ReductSource.url_field, F.text)
async def reduct_url(message: types.Message, state: FSMContext):
    if not ("https://t.me/" in message.text):
        await message.answer("–ü–æ–ª–µ url –¥–æ–ª–∂–Ω–æ —Å–æ–æ–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ—Ç —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É https://t.me/<–Ω–∞–∑–≤–∞–Ω–∏–µ> \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channels_by_url(message.text.replace(" ","")) is not None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(url_field=message.text)
    await message.answer("–ö–∞–Ω–∞–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", reply_markup=reply.manage_sources_markup)
    data = await state.get_data()
    await tg_db.update_link_telegram_channel(int(data.get("id_field_change")), str(data.get("url_field")))
    await state.clear()

class DeleteSource(StatesGroup):
    id_field_delete = State()

    texts = {
        'ReductSource:id_field_change': '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–µ –∑–∞–º–µ–Ω—ã –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ'
    }

@admin_source_manage_router.message(StateFilter(None), F.text.lower() == "—É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
async def delete_source(message: types.Message, state: FSMContext):
    channels = await tg_db.get_telegramm_channels()
    if channels is None or len(channels) == 0:
        await message.answer("–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    channels_to_str = "".join ([f"- id:{id_channel}  @{channels[id_channel][0].split("/")[-1]}\n" for id_channel in channels])
    text = "–ö–∞–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n" + channels_to_str
    
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å")
    await state.set_state(DeleteSource.id_field_delete)

@admin_source_manage_router.message(DeleteSource.id_field_delete, F.text)
async def delete_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if len(message.text) != 10:
        await message.answer("–ü–æ–ª–µ id –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ –¥–ª–∏–Ω–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    if await tg_db.get_telegram_channel_by_id(int(message.text)) is None:
        await message.answer("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    await state.update_data(id_field_delete=message.text)
    await message.answer("–ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=reply.manage_sources_markup)
    data = await state.get_data()
    await tg_db.delete_telegram_channel(data.get("id_field_delete"))
    channels = await return_channels()
    for channel in channels:
        tg_db_time = telegram_db(channel)
        await tg_db_time.delete_telegram_channel(data.get("id_field_delete"))
    await state.clear()